org: nikacer
console: true
service: pet-our-buddies
frameworkVersion: "3"
provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-2
  stackName: pet-our-buddies
  memorySize: 128
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:Get*"
            - "dynamodb:Scan*"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Query"
          Resource:
            - Fn::GetAtt: [usersTable, Arn]
            - Fn::GetAtt: [momentsTableName, Arn]
            - Fn::GetAtt: [petsTable, Arn]
        - Effect: "Allow"
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource:
            - Fn::GetAtt: [userPool, Arn]
  environment:
    REGION: ${self:provider.region}
    DYNAMODB_USER_TABLE: ${self:custom.dynamoTables.userTableName}
    DYNAMODB_MOMENTS_TABLE: ${self:custom.dynamoTables.momentsTableName}
    DYNAMODB_PETS_TABLE: ${self:custom.dynamoTables.petsTableName}
    DYNAMODB_PLACES_TABLE: ${self:custom.dynamoTables.placesTableName}
    USER_POOL_ID: { Ref: userPool }
    SERVER_COGNITO_ID: { Ref: ServerCognitoUserPoolClient }
custom:
  dynamoTables:
    userTableName: ${self:service}-users-${sls:stage}
    momentsTableName: ${self:service}-moments-${sls:stage}
    petsTableName: ${self:service}-pet-${sls:stage}
    placesTableName: ${self:service}-places-${sls:stage}
  security:
    cognitoName: ${self:service}-accessAuth-${sls:stage}
  paths:
    users: users
    places: places
    pets: pets
package:
  individually: true
  exclude:
    - "*/**"
    - "**/package-lock.json"
  include:
    - "commons/**"
functions:
  login:
    handler: security/login/src/index.handler
    timeout: 20
    package:
      include:
        - "security/login/**"
    events:
      - http:
          method: post
          path: ${self:custom.paths.users}/login
  logout:
    handler: security/logout/src/index.handler
    package:
      include:
        - "security/logout/**"
    events:
      - http:
          method: post
          path: ${self:custom.paths.users}/logout
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
  verifyToken:
    handler: security/verify/src/index.handler
    package:
      include:
        - "security/verify/**"
    events:
      - http:
          method: post
          path: ${self:custom.paths.users}/verify
  register:
    handler: security/register/src/index.handler
    package:
      include:
        - "security/register/**"
    events:
      - http:
          method: post
          path: ${self:custom.paths.users}/register
  addPlace:
    handler: places/add/src/index.handler
    package:
      include:
        - "places/add/**"
    events:
      - http:
          method: post
          path: ${self:custom.paths.places}/add
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
  searchPlace:
    handler: places/search/src/index.handler
    package:
      include:
        - "places/search/**"
    events:
      - http:
          method: post
          path: ${self:custom.paths.places}/search
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
  commentPlace:
    handler: places/comment/src/index.handler
    package:
      include:
        - "places/comment/**"
    events:
      - http:
          method: post
          path: ${self:custom.paths.places}/comment
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
  petsAdd:
    handler: pets/add/src/index.handler
    package:
      include:
        - "pets/add/**"
    events:
      - http:
          method: post
          path: ${self:custom.paths.pets}/add
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
  petsDelete:
    handler: pets/delete/src/index.handler
    package:
      include:
        - "pets/delete/**"
    events:
      - http:
          method: post
          path: ${self:custom.paths.pets}/del
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
  petsList:
    handler: pets/list/src/index.handler
    package:
      include:
        - "pets/list/**"
    events:
      - http:
          method: post
          path: ${self:custom.paths.pets}/list
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref CognitoAuthorizer
resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTables.userTableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    momentsTableName:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTables.momentsTableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: coordinates
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: coordinates-index
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: coordinates
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: name-index
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            Projection:
              ProjectionType: ALL
    petsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTables.petsTableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: emailUser
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: emailUser
            AttributeType: S
          - AttributeName: size
            AttributeType: S
          - AttributeName: ageRange
            AttributeType: S
          - AttributeName: breed
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: size_index
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: size
                KeyType: RANGE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            Projection:
              ProjectionType: ALL
          - IndexName: ageRange_index
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: ageRange
                KeyType: RANGE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            Projection:
              ProjectionType: ALL
          - IndexName: breed_index
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: breed
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: email_index
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: emailUser
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    userPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.security.cognitoName}
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
          EmailMessage: "Gracias por registrate, tu c贸digo de verificaci贸n es {####}"
          EmailSubject: ${self:service} C贸digo de verificaci贸n
        UserPoolTags:
          My: true
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        Schema:
          - Name: email
            Required: true
            Mutable: true
            AttributeDataType: String
            StringAttributeConstraints:
              MinLength: "7"
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireNumbers: true
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref userPool
        ClientName: user-pool-web
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_REFRESH_TOKEN_AUTH
    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref userPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        # [ALLOW_CUSTOM_AUTH, ADMIN_NO_SRP_AUTH, ALLOW_REFRESH_TOKEN_AUTH, ALLOW_USER_PASSWORD_AUTH, ALLOW_USER_SRP_AUTH, CUSTOM_AUTH_FLOW_ONLY, USER_PASSWORD_AUTH, ALLOW_ADMIN_USER_PASSWORD_AUTH]]
    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        RestApiId: !Ref ApiGatewayRestApi
        Name: cognito_auth
        IdentitySource: method.request.header.Authorization
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt userPool.Arn
  Outputs:
    CognitoUserPoolId:
      Value: !Ref userPool
    CognitoUserPoolArn:
      Value: !GetAtt userPool.Arn
    CognitoUserPoolWebClientId:
      Value: !Ref WebCognitoUserPoolClient
    CognitoUserPoolServerClientId:
      Value: !Ref ServerCognitoUserPoolClient
